// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Staff {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  email       String     @unique
  firstName   String
  secondName  String
  phoneNumber String?    @unique 
  password    String
  userType    UserType   @default(LECTURER)
  department  Department @relation(fields: [departmentId], references: [id])
  departmentId Int 
  units       Unit[]
}

model Student {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  email       String     @unique
  firstName   String
  secondName  String
  password    String
  regNo       String     @unique
  department  Department @relation(fields: [departmentId], references: [id])
  departmentId Int
  reports     MissingMarksReport[]
  userType    UserType @default(STUDENT)
}


model School {
  id          Int         @id @default(autoincrement())
  name        String
  abbreviation String
  departments Department[]
}

model Department {
  id         Int      @id @default(autoincrement())
  name       String
  school     School   @relation(fields: [schoolId], references: [id])
  schoolId   Int
  students   Student[] 
  staffS      Staff[]
  courses    Course[]   
}

model Course {
  id          Int      @id @default(autoincrement())
  name        String
  department  Department @relation(fields: [departmentId], references: [id])
  departmentId Int
  units       UnitCourse[]    
}

model Unit {
  id            Int      @id @default(autoincrement())
  name          String   
  code          String   
  yearOfStudy   Int      
  semester      Semester @default(SEMESTER1)
  courses        UnitCourse[]
  lecturer      Staff    @relation(fields: [lecturerId], references: [id])
  lecturerId    Int
}

model UnitCourse {
  unitId   Int
  courseId Int
  unit     Unit   @relation(fields: [unitId], references: [id])
  course   Course @relation(fields: [courseId], references: [id])

  @@id([unitId, courseId]) // Composite primary key
}

model MissingMarksReport {
  id           Int      @id @default(autoincrement())
  unitName     String
  unitCode     String
  lecturerName String
  academicYear String
  examPeriod   String
  yearOfStudy  Int
  semester     Semester
  student      Student  @relation(fields: [studentId], references: [id])
  studentId    Int
}

enum UserType {
  SUPERADMIN
  ADMIN
  DEAN
  COD
  LECTURER
  STUDENT
}

enum ExamType{
  MAIN
  SPECIAL
  SUPPLIMENTARY
}

enum Semester{
  SEMESTER1
  SEMESTER2
  SEMESTER3
}